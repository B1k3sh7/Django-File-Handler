Backend Developer Technical Test

This is a project to test your web development knowledge using Django and Python. 
Feel free to use any third-party libraries to achieve the final goal. Treat this as a
real project was assigned to you at work and not an interview test.

Write a Django application that performs the following:

1- Upload a file, save it in your local system and perform the following tests:
a. Only accept csv and text files
b. File size should not exceed 10mb,
You will find in the attachments, a file named 'schema' for pre-defined schemas. If a file 
has a similar schema:

2- Save the file content as a table to a mysql database.
Otherwise
3. Save the file data to a nosql database: mongodb. 
4. Retrieve all the files that the user uploaded.
5. Retrieve the file content requested by the user.
6  Give the user the possibility to modify the content of the file.

Bonus: The user can modify the column names of this files
-The user can upload multiple files.
-The user should not modify the original column names. Hint: create a table that contains 
the mapping of the original column names to the changed column names.


from django.db import models
from django.contrib.auth.models import User


class FileUpload(models.Model):
  file = models.FileField(upload_to='uploads/')
  uploaded_at = models.DateTimeField(auto_now_add=True)
  schema_match = models.BooleanField(default=False)


class SchemaFile(models.Model):
  name = models.CharField(max_length=255)
  schema_content = models.TextField()


class ModifiedFile(models.Model):
  original_file = models.ForeignKey(FileUpload, on_delete=models.CASCADE)
  modified_content = models.JSONField()
  column_mapping = models.JSONField(default=dict)
  modified_at = models.DateTimeField(auto_now_add=True)
  owner = models.ForeignKey(User, on_delete=models.CASCADE)


from django import forms 

class UploadForm(forms.Form):
  file = forms.FileField()


class ModifyForm(forms.Form):
  new_columns = forms.JSONField(label='New column names')


from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import FileUpload, SchemaFile, ModifiedFile
from .forms import UploadForm, ModifyForm
import pandas as pd
import json
import csv 
import io


def upload_file(request):
  if request.method == "POST":
    form = UploadForm(request.POST, request.FILES)
    if form.is_valid():
      file = form.cleaned_data['file']
      if file.size > 10 * 1024 * 1024:    #10MB
        return HttpResponse("File size exceeds 10 MB limit.")
      
      if file.content_type not in ['text/csv', 'application/vnd.ms-excel']:
        return HttpResponse('Only CSV and Excel files are allowed')

      schema_match = False
      schemas = SchemaFile.objects.all()
      for schema in schemas:
          if file.name.endswith(schema.name):
            schema_match = True
            break
      
      upload = FileUpload(file=file, schema_match=schema_match)
      upload.save() 
      
      if schema_match:
          df = pd.read_csv(file)
          columns = df.columns.tolist()
          modified = ModifiedFile(
            original_file=upload,
            modified_content=json.loads(df.to_json(orient='records')),
            column_mapping={col: f'modified_{col}' for col in columns},
            owner=request.user
          )
          modified.save()
      
      return redirect('file_list')
  else:
    form = UploadForm()
  
  return render(request, 'upload_file.html', {'form': form})


def file_list(request):
  uploads = FileUpload.objects.all()
  return render(request, 'file_list.html', {'uploads': uploads})


def retrieve_content(request, pk):
  upload = FileUpload.objects.get(pk=pk)
  if upload.schema_match:
    modified_file = ModifiedFile.objects.filter(original_file=upload).first()
    if modified_file:
      return render(request, 'content.html', {
        'content': json.loads(modified_file.modified_content),
        'column_mapping': modified_file.column_mapping,
      })
    else:
      if upload.file:
        csv_file = upload.file.read().decode('utf-8')
        csv_reader = csv.DictReader(io.StringIO(csv_file))
        content = [row for row in csv_reader]
        return render(request, 'content.html', {
          'content': content,
          'column_mapping': None
        })

    return HttpResponse('Content not available')
  

def modify_content(request, pk):
  upload = FileUpload.objects.get(pk=pk)
  modified_file = ModifiedFile.objects.filter(original_file=upload).first()
  if request.method == "POST":
    form = ModifyForm(request.POST)
    if form.is_valid():
      new_columns = form.changed_data['new_columns']
      modified_file.column_mapping.update(new_columns)
      modified_file.save()
      return redirect('retreive_content', pk=pk)
  else:
    initial_columns = modified_file.column_mapping.keys() if modified_file else []
    form = ModifyForm(initial={'new_columns': initial_columns})
  
  return render(request, 'modify_file.html', {'form': form, 'pk': pk})